# Problem 8
# =========


#    The four adjacent digits in the 1000-digit number that have the greatest
#    product are 9 × 9 × 8 × 9 = 5832.

#                73167176531330624919225119674426574742355349194934
#                96983520312774506326239578318016984801869478851843
#                85861560789112949495459501737958331952853208805511
#                12540698747158523863050715693290963295227443043557
#                66896648950445244523161731856403098711121722383113
#                62229893423380308135336276614282806444486645238749
#                30358907296290491560440772390713810515859307960866
#                70172427121883998797908792274921901699720888093776
#                65727333001053367881220235421809751254540594752243
#                52584907711670556013604839586446706324415722155397
#                53697817977846174064955149290862569321978468622482
#                83972241375657056057490261407972968652414535100474
#                82166370484403199890008895243450658541227588666881
#                16427171479924442928230863465674813919123162824586
#                17866458359124566529476545682848912883142607690042
#                24219022671055626321111109370544217506941658960408
#                07198403850962455444362981230987879927244284909188
#                84580156166097919133875499200524063689912560717606
#                05886116467109405077541002256983155200055935729725
#                71636269561882670428252483600823257530420752963450

#    Find the thirteen adjacent digits in the 1000-digit number that have the
#    greatest product. What is the value of this product?

   
#    Answer: 0f53ea7949d32ef24f9186207600403c

defmodule Problem8 do
   
   defp the_number do
      """
      73167176531330624919225119674426574742355349194934
      96983520312774506326239578318016984801869478851843
      85861560789112949495459501737958331952853208805511
      12540698747158523863050715693290963295227443043557
      66896648950445244523161731856403098711121722383113
      62229893423380308135336276614282806444486645238749
      30358907296290491560440772390713810515859307960866
      70172427121883998797908792274921901699720888093776
      65727333001053367881220235421809751254540594752243
      52584907711670556013604839586446706324415722155397
      53697817977846174064955149290862569321978468622482
      83972241375657056057490261407972968652414535100474
      82166370484403199890008895243450658541227588666881
      16427171479924442928230863465674813919123162824586
      17866458359124566529476545682848912883142607690042
      24219022671055626321111109370544217506941658960408
      07198403850962455444362981230987879927244284909188
      84580156166097919133875499200524063689912560717606
      05886116467109405077541002256983155200055935729725
      71636269561882670428252483600823257530420752963450
      """ |> String.split("\n") |> List.to_string
   end

   def problem8_given do
      the_number |> String.to_char_list |> worker({[],1},4)
   end

   def problem8_result do
      the_number |> String.to_char_list |> worker({[],1},13)
   end

   defp worker(list, product, _) when tl(tl(list)) == [] do 
      product
   end

   defp worker(list,product,consecutive) do
      current_list = list |> Enum.take(consecutive) |> Enum.map(&(char_to_int/1))
      current_product = current_list |> Enum.reduce(&(&1*&2))
      { _, p} = product      
      cond do
         current_product > p -> worker(tl(list), {current_list,current_product},consecutive)
         true            -> worker(tl(list),product,consecutive)
      end
   end

   def char_to_int(int_str) do
      [int_str] |> List.to_string |> String.to_integer
   end
end

ExUnit.start

defmodule Problem7Test do

   use ExUnit.Case, async: true
   import Problem8
   
   test "charcter to integer conversion" do
      assert char_to_int(49) == 1
      assert char_to_int('3') == 3
    end
   test "given sixth prime is correct" do
      { numbers , product} = problem8_given()
      assert product == 5832
      assert numbers == [9,9,8,9]
   end
   test "Problem8Test" do
    {numbers,result} = problem8_result()
    assert "0f53ea7949d32ef24f9186207600403c" == :os.cmd('echo -n #{result |> Integer.to_string } | md5sum') |> List.to_string |> String.split(" ") |> List.first
    IO.puts "result is #{result}"
   end

end
# Problem 12
# ==========


#    The sequence of triangle numbers is generated by adding the natural
#    numbers. So the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
#    28. The first ten terms would be:

#                     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#    Let us list the factors of the first seven triangle numbers:

#       1: 1
#       3: 1,3
#       6: 1,2,3,6
#      10: 1,2,5,10
#      15: 1,3,5,15
#      21: 1,3,7,21
#      28: 1,2,4,7,14,28

#    We can see that 28 is the first triangle number to have over five
#    divisors.

#    What is the value of the first triangle number to have over five hundred
#    divisors?

   
#    Answer: 8091de7d285989bbfa9a2f9f3bdcc7c0

defmodule Problem12 do
	
	def triangular(n), do: div(n*(n+1),2)

	def factorize(n) do
	  _factorize(n,2,div(n,2),[])
	end

	defp _factorize(n,current,limit,factors) do
	  cond do
	    n <= 1              -> factors   
	    current > limit     -> factors
	    rem(n,current) == 0 -> _factorize(div(n,current),2,limit,factors++[current]) 
	    rem(n,current) != 0 -> _factorize(n,current+1,limit,factors) 
	  end
	end

	def compress(list) do
		_compress(list,[])
	end

	defp _compress([],result),do: result |> Enum.reverse

	# def _compress([a | tail],[a | rest]),do: _compress(tail,[{a,2} | rest])

	defp _compress([a | tail],[{a,n} | rest]), do: _compress(tail,[{a,n+1} | rest ])

	defp _compress([a | tail],result), do: _compress(tail,[{a,1} | result])


	def factor_counts(factors) do
		compress(factors) |> Enum.reduce(1, fn ({_,p},acc) -> acc * (p+1)  end)
	end

	def find(n) do
		count = triangular(n) |> factorize |> factor_counts
		cond do
			count <= 500 -> find(n+2)
			true         -> {n,triangular(n),count}
		end 
	end

	def problem12_result do
		{_,val,_} = find(1)
		val
	end
end

ExUnit.start

defmodule Problem12Test do

	   use ExUnit.Case, async: true
	   import Problem12

	   test "triangular sequence" do
	   		assert triangular(7) == 28
	   		assert triangular(10) == 55
	   		assert triangular(100) == 5050
	   end

	   test "compressing factors" do
	   		assert compress([1,2,2,2,3,3,7]) == [{1,1},{2,3},{3,2},{7,1}]
	   end

	   test "factorizing 10" do
	      assert factorize(10) == [2,5]
	   end

	   test "counting factors" do
	  		assert factor_counts([{2,1},{5,1}]) == 4
	   end

	   test "Problem11Test" do
	    result = problem12_result
	    assert "8091de7d285989bbfa9a2f9f3bdcc7c0" == :os.cmd('echo -n #{result} | md5sum') |> List.to_string |> String.split(" ") |> List.first
	    IO.puts "result is #{result}"
	   end
end
# Problem 2
# =========


#    Each new term in the Fibonacci sequence is generated by adding the
#    previous two terms. By starting with 1 and 2, the first 10 terms will be:

#                      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

#    By considering the terms in the Fibonacci sequence whose values do not
#    exceed four million, find the sum of the even-valued terms.

defmodule FibSequence do
	def generate_while first, second, predicate do
		stream(first,second) |> Enum.take_while(predicate)
	end


	def stream(first,second) do
		Stream.iterate([first,second], fn(l)->  
			[a,b] = l
			[b,a+b]
		end) |> Stream.map(fn lst -> List.last(lst) end)
	end

end

ExUnit.start

defmodule Problem2Test do

	use ExUnit.Case, async: true
	require Integer
	# defmodule TestUtilities do
	# 	#code from https://github.com/pigoz/katas/blob/master/elixir-lists-rotate/lib/lists_rotate_elixir.ex		
	# 	defmodule ListsRotation do
	# 		import Enum, [:reverse, 1]
	# 		def lrotate(list, 0), do: list
	# 		def lrotate([head|list], number), do: lrotate(list ++ [head], number - 1)
	# 		def rrotate(list, number), do: list |> reverse |> lrotate(number) |> reverse
	# 	end
	# end
	# import TestUtilities
	def is_fibonacci? sequence do
		[head | rest] = sequence
		case rest do
			[a,b] -> head + a == b
			[a,b | _ ] -> head + a == b and is_fibonacci? rest 
		end		
	end


	test "#is_fibonacci?" do
		assert is_fibonacci?([1,2,3,5,8,13,21,34,55,89])
		assert is_fibonacci? [100,101,201,302]
		refute is_fibonacci?([1,2,3,4,5])
	end
	
	# test "a sequence is fibonacci" do
	# 	assert fibonacci(1) == 1
	# 	assert fibonacci(2) == 1
	# 	assert fibonacci(10) == [1,2,3,5,8,13,21,34,55,89]
	# end

	test "FibSequence generate fibonaccis" do
		assert is_fibonacci? FibSequence.generate_while(1,2,fn num -> num < 4_000_000 end)
	end

	test "FibSequence generate according to given condition" do
		condition = fn num -> num < 4_000_000 end
		fitlered_result = FibSequence.generate_while(1,2,condition) |> Enum.filter(fn num-> !condition.(num) end)
		assert fitlered_result == []
	end

	IO.puts FibSequence.generate_while(1,2,fn num -> num < 4_000_000 end) |> Enum.filter(&Integer.is_even/1) |> Enum.sum
	
end